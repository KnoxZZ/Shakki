package game;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.Arrays;import java.util.Scanner;import nappulat.Hevonen;import nappulat.Nappula;import nappulat.Torni;import utils.Lauta;import utils.OsCheck;import utils.Position;public class MainGame {	String[] codes = OsCheck.getChars();	final static String[] characters = {"A","B","C","D","E","F","G","H"};	static Scanner reader = new Scanner(System.in);	public static void main(String[] args) throws IOException, InterruptedException {		Lauta pelilauta = new Lauta();		pelilauta.startPos();				boolean whitesTurn = true;				mainLoop: while(true) {			System.out.print(pelilauta);			String[] inputs = getInput();			int[][] numInputs = stringsToNumbers(inputs);						for(int i = 0; i < 2; i++) {				for (int j = 0; j < 2; j++) {					System.out.print(numInputs[i][j]);					System.out.print(",");				}				System.out.print("\n");			}						boolean legitMove = true;						for(int[] siirto : numInputs) {				if(!pelilauta.legitMove(siirto[0], siirto[1])) {					legitMove = false;				}			}						if(!legitMove) {				Clear("Move not inside the grid");				continue mainLoop;			}						Position from = pelilauta.getPosition(numInputs[0][0], numInputs[0][1]);			Position to = pelilauta.getPosition(numInputs[1][0], numInputs[1][1]);						if(!from.hasNappula()) {				Clear("No pieces in that position");				continue mainLoop;			}						Nappula toMove = from.getNappula();						if(whitesTurn != toMove.isVari()) {				Clear("That's not your piece idiot");				continue mainLoop;			}						if(!toMove.isLegit(from, to)) {				Clear("Illegal move for that piece");				continue mainLoop;			}									if(!to.hasNappula()) {				pelilauta.setNappula(numInputs[1][0], numInputs[1][1], toMove);				pelilauta.delNappula(numInputs[0][0], numInputs[0][1]);				whitesTurn = !whitesTurn;				Clear("Approved");				continue mainLoop;			} else if (to.hasNappula() && to.getNappula().isVari() == toMove.isVari()) {				Clear("Trying to eat your own pieces?");				continue mainLoop;			} else if (to.hasNappula() && to.getNappula().isVari() != toMove.isVari()) {				pelilauta.setNappula(numInputs[1][0], numInputs[1][1], toMove);				pelilauta.delNappula(numInputs[0][0], numInputs[0][1]);				whitesTurn = !whitesTurn;				Clear("Approved");				continue mainLoop;			}									Clear("Wut");			continue mainLoop;		}	}		public static void Clear(String... errorMsg) throws InterruptedException, IOException {		OsCheck.clearConsole(errorMsg);	}		public static String[] getInput() {		System.out.println("From where to where? [xy;xy] (Example: A4;A6): ");		String n = reader.next();				if (!legitString(n)){			System.out.println("Not proper input");			return getInput();		}				String[] inputs = n.split(";");		boolean temp = true;		for (String text : inputs) {			if(!legitPositionString(text)) {				temp = false;			}		}				if (!temp){			System.out.println("Not proper input");			return getInput();		} else {			return inputs;		}	}		public static boolean legitString(String str) {		if(str.length() == 5 && str.substring(2, 3).equals(";")) {			return true;		}				return false;	}		public static boolean legitPositionString(String pos) {		if(pos.length() == 2) {			String start = pos.substring(0, 1);			String end = pos.substring(1);			int startInt = 0;			try {				startInt = Integer.parseInt(start);			} catch (NumberFormatException e) {				return false;			}			if(Arrays.asList(characters).contains(end.toUpperCase()) && startInt-1 < 8) {				return true;			}		}				return false;	}		public static int[][] stringsToNumbers(String[] strs) {		int[][] ready = new int[strs.length][2];				for (int i = 0; i < strs.length; i++) {			ready[i][0] = Integer.parseInt(strs[i].substring(0, 1))-1;			ready[i][1] = strToInt(strs[i].substring(1, 2));		}				return ready;	}		public static int strToInt(String s) {		int counter = 0;		while(counter <= 8) {			if(characters[counter].equalsIgnoreCase(s)) {				break;			}			counter++;		}		return counter;	}}